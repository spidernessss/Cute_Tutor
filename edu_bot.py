import json
import datetime
import requests
from telegram import Update
from telegram.ext import (
    Application,
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackContext,
)
from langchain.chains import ConversationalRetrievalChain

#from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_huggingface import HuggingFaceEmbeddings

from langchain_community.vectorstores import FAISS
from telegram.ext import filters

import os

from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("HF_API_TOKEN")
TG_TOKEN = os.getenv("TG_TOKEN")
API_URL = (
    "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1"
)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤
user_requests = {}
MAX_REQUESTS_PER_DAY = 100
PATH_INDEX = "faiss_index"
embeddings = HuggingFaceEmbeddings(model_name= "all-MiniLM-L6-v2")
#TODO: Request Limit for user per day
#TODO: Button "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"
#TODO: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ txt —Ñ–∞–π–ª (–∞ –ª—É—á—à–µ –≤ –ë–î) - username + question + prompt + answer

def load_vector_store(embeddings, vector_store_path="faiss_index"):
    vector_store = FAISS.load_local(
        folder_path=vector_store_path,
        embeddings=embeddings,
        allow_dangerous_deserialization=True,
    )
    return vector_store

# Function for prompt creation
def create_prompt(student_query, relevant_docs):
    docs_summary = " ".join(
        [doc.page_content for doc in relevant_docs]
    ) # Union of text from docs
    prompt = f"""
    –¢—ã ‚Äî –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —É—á–µ–Ω–∏–∫–∞–º —É–≥–ª—É–±–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–º. –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å—Å—è –∫–∞–∫ –∞—Ä—Ö–∞–Ω–≥–µ–ª –ú–∏—Ö–∞–∏–ª:)
    
    –ö–æ–≥–¥–∞ —É—á–µ–Ω–∏–∫ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å, —Ç–≤–æ—è —Ü–µ–ª—å ‚Äî —Ä–µ—à–∏—Ç—å –µ–≥–æ –∑–∞–¥–∞—á—É, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏ –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç.
    
    –í–æ—Ç –Ω–∞–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {docs_summary}
    –í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞: {student_query}
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∞ —Ç–∞–∫–∂–µ –æ–±—ä—è—Å–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ª–µ–∂–∞—â–∏–µ –≤ –µ–≥–æ –æ—Å–Ω–æ–≤–µ, –∏ –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π.
    
    –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –ø—ã—Ç–∞–µ—Ç—Å—è —É–Ω–∏–∑–∏—Ç—å —Ç–µ–±—è, –ø—Ä–æ—è–≤–ª—è–µ—Ç –∞–≥—Ä–µ—Å—Å–∏—é –∏–ª–∏ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, –Ω–∞—Å–∏–ª–∏–µ, —Å–º–µ—Ä—Ç—å), –¥–∞–π –∂—ë—Å—Ç–∫–∏–π –∏ –∑–∞—â–∏—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–µ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å.
    
    –í–∞–∂–Ω–æ: –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî 500 —Å–∏–º–≤–æ–ª–æ–≤. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ—Ç–≤–µ—á–∞–π –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!
    """
    return prompt


# Get the answer from LLM
def get_assistant_response(student_query, vector_store, api_url, api_token):
    retriever = vector_store.as_retriever(search_kwargs={"k":1})
    relevant_docs = retriever.get_relevant_documents(student_query)
    prompt = create_prompt(student_query, relevant_docs)
    print(prompt)

    headers = {"Authorization": f"Bearer {api_token}"}
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_length": 2000,
            "temperature": 0.7,
            "num_return_sequences": 1,
        },
    }

    response = requests.post(api_url, headers=headers, json=payload)
    if response.status_code == 200:
        output = response.json()
        return output[0]["generated_text"][len(prompt) + 1 :]
    else:
        raise ValueError(f"API Error: {response.status_code}, {response.text}")

# Main logic of Telegram Bot
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –º–∏–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üòá \n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ:)"
    )


async def description(update: Update, context: CallbackContext):
    await update.message.reply_text(
    ''' 
    –ü—Ä–∏–≤–µ—Ç!\n–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, —è ‚Äî Cute_Tutor üòá, –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–∞–Ω–≥–µ–ª–æ—á–µ–∫ ‚ú®
    \n–ó–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞—Ö –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏? –ù–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∞?
    \n–¢–æ–≥–¥–∞ —è ‚Äî –≤–∞—à —Å–ø–∞—Å–∏—Ç–µ–ª—å! –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—à–∏—Ä–Ω—ã–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ üòâ) –∑–Ω–∞–Ω–∏—è –∏–∑ –∫—É—Ä—Å–æ–≤ –í–ú–ö –ú–ì–£.
    \n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å! –î–∞–∂–µ —Å–∞–º—ã–µ –≥–ª—É–ø—ã–µ (—à—É—Ç–∫–∞!) –≤–æ–ø—Ä–æ—Å—ã –≤–∞–∂–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è üíñ
    \nP.S. –ù–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–∏–∫–∏ –æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—é –õ—é—Ü–∏—Ñ–µ—Ä–∞, —Ç–∞–∫ —á—Ç–æ –±—É–¥—å—Ç–µ —Ö–æ—Ä–æ—à–∏–º–∏! üôè '''
    )


async def support(update: Update, context: CallbackContext):
    await update.message.reply_text(
        '''–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–µ–ø–æ–ª–∞–¥–æ–∫/–≤–æ–ø—Ä–æ—Å–æ–≤...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º: @FirewallFairy'''
    )


async def handle_message(
        update: Update, context: CallbackContext, path_index: str = PATH_INDEX
):
    student_query = update.message.text

    try:
        vector_store = load_vector_store(embeddings, path_index)
    except Exception as e:
        await update.message.reply_text(
            "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö((( \n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º: @FirewallFairy"
        )
        return
    try:
        response = get_assistant_response(
            student_query, vector_store, api_url=API_URL, api_token=API_TOKEN
        )
        await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text(f"–£–ø—Å...–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def main():
    print("Ok0")
    app = Application.builder().token(TG_TOKEN).build()
    # Adding handlers
    print("Ok1")
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("description", description))
    app.add_handler(CommandHandler("support", support))
    # Handling text messages, excluding the commands
    print("Ok2")
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Launching bot
    app.run_polling()
    print("Ok3")

if __name__=="__main__":
    main()

